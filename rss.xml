<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Jaydson Gomes</title>
        <link>http://jaydson.org</link>
        <description>Coisas sobre JavaScript e desenvolvimento Web</description>
        <managingEditor>Jaydson</managingEditor>
        <webMaster>Jaydson</webMaster>
        <pubDate>Mon, 13 Jul 2015 02:53:01 GMT</pubDate>
        <language>pt-br</language>
        <atom:link href="http://jaydson.org/rss.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Processo front-end no Terra</title>
            <link>http://jaydson.org/processo-front-end-no-terra</link>
            <description><![CDATA[<p><br>
No <a href="http://terra.com.br">Terra</a>, o nosso processo de desenvolvimento front-end evoluiu muito nos últimos anos.<br>Relatei o histórico dessa evolução e como saimos de um processo totalmente falho para um processo eficaz e automatizado na palestra <a href="https://speakerdeck.com/jaydson/processo-de-desenvolvimento-frontend-do-caos-ao-sublime">&quot;Processo de Desenvolvimento front-end - Do caos ao Sublime&quot;</a>, também disponível em <a href="https://www.youtube.com/watch?v=tDGoXFM9afE">vídeo</a>.<br>Nosso processo antigo baseava-se basicamente em uma coisa: fazer commit no <a href="https://subversion.apache.org/">SVN</a>.<br>Em uma imagem:<br><br><img src="http://i.giphy.com/GYU7rBEQtBGfe.gif" alt="Go-Horse detected">  </p>
<p>Esse processo <em>testless</em>, <em>horseness</em>, etc, provavelmente foi aplicado em muitas empresas no passado (e ainda é!?!?!?!), e <a href="http://jaydson.org/cultura-maldita-no-desenvolvimento-de-software/">mudar a cultura é algo difícil</a>.<br>Isso tudo foi na era pré-<a href="http://jquery.com/">jQuery</a> e eu ainda nem fazia parte da empresa, mas quando cheguei, esse era o cenário.  </p>
<p>Acredito que a base para se ter um produto de qualidade é garantir que o código também tenha qualidade.<br>Um ambiente de desenvolvimento com tecnologia de ponta e processos bem definidos é uma das ferramentas que vai nos permitir fazer código consistente, consequentemente gerando produtos melhores.  </p>
<h2 id="testar-front-end-dif-cil">Testar front-end é difícil</h2>
<p>Front-end é diferente. Deal with it.<br>Óbvio que muitos dos conceitos existentes em outras linguagens e plataformas são aplicáveis nesse mundo, mas não tudo.<br>Para empresas em que a realidade não é o desenvolvedor full-stack isso fica muito claro. Basta falar com um desenvolvedor com brackground back-end para entender que pouca coisa pode ser reutilizada na camada do browser.<br>Fazer qualquer tipo de teste no ambiente front-end não é uma tarefa fácil.<br>A velha história: browsers, resolução de tela, sistema operacional, devices e plataformas diferentes são algumas das variáveis que temos nesse mundo complexo.<br>A verdade é que agora estamos em um cenário totalmente diferente. 
Dizer que &quot;é difícil&quot; não é mais desculpa, e difícil não é impossível.<br>Com o avanço da tecnologia na área de front-end e a quantidade de ferramentas disponíveis que temos atualmente, testar bem e de forma automatizada o seu produto, ter processos coerentes, seguir e aplicar conceitos sólidos de mercado, etc, é o mínimo.  </p>
<h2 id="onde-estamos-no-terra">Onde estamos no Terra</h2>
<p>Estamos no ponto que ainda considero básico.   </p>
<ul>
<li>Todas aplicações são (ou devem ser) baseados no nosso Framework interno</li>
<li>Todas aplicações devem possuir testes unitários</li>
<li>Os testes unitários rodam no PhantomJS e no browser</li>
<li>Todas aplicações são iniciadas com um scaffold básico que garante consistência</li>
<li>Todas aplicações devem ser documentadas</li>
<li>O build de todas aplicações são baseadas no Grunt</li>
<li>O Grunt garante que todas aplicações possuam tasks básicas de validação e de build</li>
<li>Cada aplicação é um projeto isolado no Github (usamos a solução <a href="https://enterprise.github.com/home">enterprise</a>)</li>
<li>O deploy é feito de forma automática pelo noss CI server (Jenkins)</li>
<li>O CI server obrigatóriamente roda as tasks de build e validação  </li>
</ul>
<p><br>
Pontos falhos que devemos melhorar:  </p>
<ul>
<li>O desenvolvedor pode desabilitar os testes antes de fazer deploy</li>
<li>Grande parte dos testes da aplicação precisam de mão humana</li>
<li>Não existe teste comportamental nos projetos (BDD)</li>
<li>Não existe teste automatizado para múltiplos browsers, plataformas e dispositivos</li>
<li>Não existe um dashboard para acompanhar o status de cada aplicação</li>
</ul>
<h2 id="como-resolver-os-pontos-falhos">Como resolver os pontos falhos</h2>
<p><em>&quot;O desenvolvedor pode desabilitar os testes antes de fazer deploy&quot;</em>
O nosso CI server roda 2 tasks do Grunt: <code>ci-validate</code> e <code>ci-build</code>.<br>Estas tasks são responsáveis por validar (testes, lint, style, etc) e fazer o build.<br>O problema é que a task de validação precisa existir no projeto, e em alguns casos ela já foi desabilitada por algum desenvolvedor espertinho que não quis parar para resolver um erro simples, ou não quis validar os testes unitários.<br>Uma possível solução seria criar um mecanismo de defesa que sempre incluisse a task de validação no CI server. Desta maneira, mesmo que o projeto não faça validação, o servidor irá fazer, e bloquear a deploy em caso de falha.  </p>
<p><em>&quot;Grande parte dos testes da aplicação precisam de mão humana&quot;</em><br>A responsabilidade de testar uma interface fica dividida entre desenvolvedor, gerente, área de produtos e quem mais estiver envolvido no projeto.<br>Isso é péssimo, nunca ninguém sabe ao certo o que validar, e tudo acaba sendo muito superficial.<br>Uma possível solução seria integrar a cada projeto testes compartamentais, tornando assim o processo mais consistente e menos dependente de pessoas.  </p>
<p><em>&quot;Não existe teste automatizado para múltiplos browsers, plataformas e dispositivos&quot;</em><br>O processo que temos hoje apenas roda testes no PhantomJS rodando em um Linux.<br>Já é um primeiro passo, mas longe do ideal.<br>Nosso próximo passo é integrar alguma solução como o <a href="http://www.seleniumhq.org/projects/webdriver/">WebDriver</a>.  </p>
<h2 id="conclus-o">Conclusão</h2>
<p>Mesmo não sendo nada revolucionário, resolvi compartilhar o que fazemos, pois tenho certeza que será útil de alguma forma para alguém.<br>Como falei antes, ainda considero esse processo muito básico e estamos correndo para chegar em um outro patamar em breve.<br>Comparando com o processo anterior, evoluímos uns 10 anos em pouco mais de 2.  </p>
]]></description>
            <pubDate>Thu, 25 Jun 2015 04:52:57 GMT</pubDate>
            <guid>http://jaydson.org/processo-front-end-no-terra</guid>
        </item>
        
        <item>
            <title>WebAssembly e o futuro da Web</title>
            <link>http://jaydson.org/webassembly-e-o-futuro-da-web</link>
            <description><![CDATA[<h2 id="o-wasm-">O &quot;wasm&quot;</h2>
<p>Na última semana, <a href="https://brendaneich.com">Brendan Eich</a>, o criador do <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a>, <a href="https://brendaneich.com/2015/06/from-asm-js-to-webassembly">anunciou</a> o <a href="https://github.com/WebAssembly">WebAssembly</a>.<br>O WebAssembly, ou apenas <em>&quot;wasm&quot;</em> é um novo formato binário para a Web.<br>O <a href="https://twitter.com/_ericelliott">Eric Elliot</a> <a href="https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6">definou</a> muito bem o que é o WebAssembly em 4 simples itens:  </p>
<ul>
<li><strong><em>WebAssembly é uma melhoria para o JavaScript</em></strong><br><em>Uma maneira de implementar coisas críticas para performance em wasm e usa-las com JavaScript</em></li>
<li><strong><em>WebAssembly é uma nova linguagem</em></strong><br><em>Código wasm define um <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> representado em um formato binário</em></li>
<li><strong><em>WebAssembly é uma melhoria para os Browsers</em></strong><br><em>Os Browsers entenderão esse formato binário, e na maioria dos casos isso será mais rápido</em></li>
<li><strong><em>WebAssembly é uma forma de suportar outras linguagens na plataforma Web</em></strong><br><em>Outras linguagens poderão compilar para wasm e rodar no navegador como binário first-class</em><br><br></li>
</ul>
<p>Parafraseando o Brendan, wasm é uma nova representação intermediária de código na Web.<br>Esse novo formato tem como objetivo principal ser performático (mais do que o JavaScript e mais do que o <a href="http://asmjs.org/">asm.js</a>) e também permitir que outras linguagens compilem para wasm, fazendo com que rodem &quot;nativamente&quot; na Web.<br>Obviamente uma questão vêm à tona: Mas já não houveram outras iniciativas parecidas como essa antes? Flash? Google Native Client?<br>Pois é.<br>O <a href="http://www.2ality.com/">Dr. Axel Rauschmayer</a> <a href="http://www.2ality.com/2015/06/web-assembly.html">listou</a> 3 pontos que diferem a nova abordagem das antigas:  </p>
<ul>
<li>Não existe uma só empresa por trás dessa iniciativa. <a href="http://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/#.jhbnb6:Gfuu">Mozilla, Google, Microsoft, entre outros</a>, estão engajados nesse projeto, com o objetivo de tornar a Web mais rápida.  </li>
<li>Existe uma boa interoperabilidade entre o JavaScript e o wasm, diferente de antigas implementações (Lembram que horror integrar Flash com JS?). Usar wasm será tão simples como importar um <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">módulo ES2015/ES6</a>.  </li>
<li>Para rodar o wasm não será necessário um plugin ou um novo <em>browser engine</em>, mas sim apenas a implementação desta nova camada nas engines existentes.<br><br>
Isso é excelente, pois o interesse aqui não é apenas algo específico para uma aplicação ou para uma empresa, mas sim para a evolução da Web.<br>Um novo standard baseado em interesses da comunidade de desenvolvimento e com apoio das gigantes da tecnologia parece muito promissor.<br>O projeto já nasceu <a href="https://github.com/WebAssembly">aberto</a> e um <a href="https://www.w3.org/community/webassembly/">W3C Community Group</a> já foi criado, portanto, se tu tens interesse em contribuir de alguma maneira, não existem barreiras!  </li>
</ul>
<h2 id="objetivos">Objetivos</h2>
<p>O projeto lista alguns <a href="https://github.com/WebAssembly/design/blob/master/HighLevelGoals.md">High Level Goals</a>, dentre eles:    </p>
<ul>
<li>Definir um formato binário que seja eficiente no tamanho e no carregamento que possa ser compilado para ser executado em velocidade nativa, aproveitando recursos de hardware comuns disponíveis em diversas plataformas, incluindo mobile e <a href="https://en.wikipedia.org/wiki/Internet_of_Things">IoT</a>.  </li>
<li>Especificar e implementar incrementalmente um MVP com as mesmas funcionalidades do asm.js, além de ter um polyfill que  traduzirá wasm para JavaScript.<br><br>
Creio que em pouco tempo já teremos algo disponível para brincarmos :)<br>Para os mais aventureiros, já existe um <a href="https://github.com/WebAssembly/polyfill-prototype-1">protótipo de polyfil</a> no Github onde é possível testar algumas coisas e entender o que teremos em futuro próximo.<br>Neste protótipo existe uma ferramenta que compila arquivos JavaScript contendo código asm.js para o novo formato WebAssembly.<br>Basicamente o resultado será algo assim:  <pre><code>7761 736d 2603 0000 0000 0002 0303 0002
0103 0000 0000 0000 0000 0003 0001 0100
8000 8000 8000 0102 6f6e 6500 0074 776f
0001
</code></pre><img src="/img/webassembly-hacker.jpg" alt="WebAssembly Hacker"></li>
</ul>
<p><br>
Sim, wasm é um fomato binário, lembram? (dãh)</p>
<p>É isso pessoal, esse foi um overview bem superficial do que é o WebAssembly.<br>Recomendo fortemente que leiam os artigos citados abaixo nas referências para um melhor aprofundamento.  </p>
<p>Referências:<br><a href="https://brendaneich.com/2015/06/from-asm-js-to-webassembly">https://brendaneich.com/2015/06/from-asm-js-to-webassembly</a><br><a href="https://github.com/WebAssembly">https://github.com/WebAssembly</a><br><a href="http://www.2ality.com/2015/06/web-assembly.html">http://www.2ality.com/2015/06/web-assembly.html</a><br><a href="https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6">https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6</a><br><a href="http://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly">http://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly</a><br><a href="http://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/#.jhbnb6:Gfuu">http://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/#.jhbnb6:Gfuu</a>  </p>
]]></description>
            <pubDate>Tue, 23 Jun 2015 04:23:59 GMT</pubDate>
            <guid>http://jaydson.org/webassembly-e-o-futuro-da-web</guid>
        </item>
        
        <item>
            <title>APIs REST em 1 minuto</title>
            <link>http://jaydson.org/api-s-rest-em-1-minuto</link>
            <description><![CDATA[<p>No último <a href="http://rsjs.org">RSJS</a> tive a oportunidade de assistir a palestra <a href="http://dclucas.github.io/prez-harvesterjs">&quot;Ligthweight APIs with HarvesterJS&quot;</a> do meu ex-professor <a href="https://twitter.com/diogoclucas">Diogo Lucas</a>.<br>Em poucos minutos de palestra eu já consegui identificar várias aplicações que fiz no passado, que poderiam ser totalmente reescritas de uma maneira muito mais simples com o <a href="https://github.com/agco/harvesterjs">HarvesterJS</a>.<br>O HarvesterJS é originalmente um fork do projeto <a href="http://fortunejs.com/">FortuneJS</a>, um framework para criar APIs <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> baseadas na spec <a href="http://jsonapi.org">JSONAPI</a>.  </p>
<p>O objetivo do Harvester foca em manter uma API fiel à JSONAPI spec, com suporte específico ao <a href="http://docs.mongodb.org/">MongoDB</a> (além de resolver alguns problemas de escalabilidade).<br>O projeto está bem ativo e é mantido pelo pessoal da <a href="http://www.agcocorp.com/">AGCO</a>, uma empresa do ramo da agricultura.  </p>
<p>Ok ok, <em>talk is cheap</em>.<br>O título do post é bem sério. É possível criar uma API REST em 1 minuto com o Harvester.<br>Supondo que o seu ambiente já tenha <a href="http://nodejs.org">Node.js</a> e MongoDB, o resto é super fácil, mesmo.<br>Digamos que a sua API precisa expor uma entidade &quot;artist&quot;.<br>Por expor entenda que a API deve disponibilizar métodos <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> para as aplicações.  </p>
<pre><code>// app.js
let harvester = require(&#39;harvesterjs&#39;);

let app = harvester({
    adapter: &#39;mongodb&#39;,
    connectionString: &quot;localhost:27017/mydatabase&quot;
});

app.resource(&#39;artist&#39;, {
    name: String,
    description : String,
})
.listen(1337);
</code></pre><p>Pronto.<br>Basta levantar a aplicação:  </p>
<pre><code>node app.js
</code></pre><p>E agora existe uma API REST completa funcionando.<br>O que é possível fazer?<br>Todas as operações de CRUD via métodos http:  </p>
<h2 id="listar-todos-artistas">Listar todos artistas</h2>
<pre><code>GET     /artists
</code></pre><h2 id="criar-um-novo-artista">Criar um novo artista</h2>
<pre><code>POST     /artists
{
    &quot;name&quot;: &quot;Sepultura&quot;,
    &quot;description&quot;: &quot;Brazilian Metal band&quot;
}
</code></pre><h2 id="pegar-um-artista-pelo-id">Pegar um artista pelo ID</h2>
<pre><code>GET     /artists/555d0bbb37d40da5abc11a86
</code></pre><h2 id="alterar-os-dados-de-um-artista">Alterar os dados de um artista</h2>
<pre><code>PUT     /artists/555d0bbb37d40da5abc11a86
{
    &quot;name&quot;: &quot;Sepultura&quot;,
    &quot;description&quot;: &quot;Best brazilian Metal band ever&quot;
}
</code></pre><h2 id="deletar-um-artista">Deletar um artista</h2>
<pre><code>DELETE     /artists/555d0bbb37d40da5abc11a86
</code></pre><p><br />
Ainda é possível criar relações de maneira bem simples.<br>Digamos que um artista possui referência à outro artista, no caso, 1 para n.<br>Podemos alterar o nosso &quot;resource&quot; de maneira que essa relação seja estabelecida:  </p>
<pre><code>app.resource(&#39;artist&#39;, {
    name: String,
    description : String,
    influences : [&#39;artist&#39;]
})
.listen(1337);
</code></pre><p>Com esta simples alteração nossa API passa a suportar relações:  </p>
<pre><code>GET  /artists/555d5c701eb2d1d033f3b704/influences
</code></pre><p>O retorno desta chamada será baseado nas relações previamente armazenadas, ou seja, se a aplicação disse que determinado artista possui 2 influências, um array de 2 artistas será retornado.  </p>
<h2 id="conclus-o">Conclusão</h2>
<p>Este foi um post introdutório com objetivo de mostrar como é fácil criar APIs REST com o Harvester.<br>Além da facilidade, o código necessário para escrever APIs fica muito fácil de manutenir e evoluir.<br>Eu mesmo reescrevi uma aplicação que tinha certamente mais de 1500 linhas em pouco mais de 10 linhas com o Harvester.  </p>
<p><blockquote class="twitter-tweet" lang="en"><p lang="pt" dir="ltr">Ontem reescrevi em 10 linhas uma aplicação que fiz há um ano atrás com umas 1500. Sério. &lt;3 HarvesterJS //cc <a href="https://twitter.com/diogoclucas">@diogoclucas</a></p>&mdash; Jaydson Gomes (@jaydson) <a href="https://twitter.com/jaydson/status/603541170426290178">May 27, 2015</a></blockquote></p>
<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
É isso pessoal, para maiores informações sobre o Harvester, vasculhem o Github do projeto (ainda está com pouca documentação, mas em breve eles devem resolver esse problema).  </p>
]]></description>
            <pubDate>Wed, 27 May 2015 21:30:20 GMT</pubDate>
            <guid>http://jaydson.org/api-s-rest-em-1-minuto</guid>
        </item>
        
        <item>
            <title>Entrevista JSConf Argentina 2014</title>
            <link>http://jaydson.org/entrevista-jsconf-argentina-2014</link>
            <description><![CDATA[<p>No <a href="/es6rocks-palestra-na-jsconf-argentina">post anterior</a> falei sobre minha palestra na JSConf Argentina.<br>Além do vídeo da palestra, rolou também uma pequena entrevista bem bacana feita pelo pessoal da organização.<br>Na entrevista falo um pouco sobre o que foi a minha palestra, e claro, sobre JavaScript :)</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/xzTfi7Wz6ac" frameborder="0" allowfullscreen></iframe>]]></description>
            <pubDate>Tue, 26 May 2015 00:47:37 GMT</pubDate>
            <guid>http://jaydson.org/entrevista-jsconf-argentina-2014</guid>
        </item>
        
        <item>
            <title>ES6Rocks - Palestra na JSConf Argentina</title>
            <link>http://jaydson.org/es6rocks-palestra-na-jsconf-argentina</link>
            <description><![CDATA[<p>Em novembro de 2014 tive o prazer de palestrar na <a href="http://jsconfar.com/">JSConf Argentina</a>.<br>Além da pressão de pela primeira vez palestrar em inglês, dividi o palco com <a href="https://brendaneich.com/">Brendan Eich</a>, <a href="http://andreasgal.com/">Andreas Gal</a>, <a href="https://alexsexton.com/">Alex Sexton</a>, <a href="http://mrdoob.com/">Mr. Doob</a>, <a href="https://github.com/sebmarkbage">Sebastián Markbage</a>, entre outros. Baita responsabilidade.<br>Lá falei sobre ES6, a nova versão do JavaScript (hoje ES2015 - as coisas mudam rápido né?).<br>O vídeo da palestra está disponível no Youtube:  </p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/7g_6hfG0stc" frameborder="0" allowfullscreen></iframe> 
<br /><br /> </p>
<p>E os slides no speakerdeck:</p>
<script async class="speakerdeck-embed" data-id="b6e9667059bb013265ca4603c43c215f" data-ratio="1.6" src="//speakerdeck.com/assets/embed.js"></script>]]></description>
            <pubDate>Fri, 22 May 2015 02:34:29 GMT</pubDate>
            <guid>http://jaydson.org/es6rocks-palestra-na-jsconf-argentina</guid>
        </item>
        
        <item>
            <title>20 anos do JavaScript</title>
            <link>http://jaydson.org/20-anos-do-javascript</link>
            <description><![CDATA[<p><em>Texto originalmente postado no blog do Rafael Kuhn, CTO do <a href="http://terra.com.br">Terra</a>.<br><a href="http://tecnologia.terra.com.br/na-terra-da-tecnologia/blog/2015/05/19/20-anos-de-javascript-a-chegada-a-maturidade/">http://tecnologia.terra.com.br/na-terra-da-tecnologia/blog/2015/05/19/20-anos-de-javascript-a-chegada-a-maturidade/</a></em>  </p>
<p>Em maio de 1995 nascia a linguagem de programação que hoje podemos chamar de linguagem ubíqua.<br>Sim, o JavaScript está em todos os lugares ao mesmo tempo de forma quase onipresente.<br>Não acredita?<br>O JavaScript está presente em 99,99% dos browsers. Praticamente todas as páginas web executam algum tipo de código JavaScript, ou seja, pode ter certeza que diariamente muito código JavaScript está sendo executado durante uma pesquisa no Google, leitura de uma notícia no Terra ou procrastinação no Facebook.<br>A internet das coisas está em alta e o JavaScript está presente neste contexto como linguagem de alto-nível (<a href="nodejs.org">Node.js</a>) para programação de equipamentos que são capazes de se comunicar com a internet, através de frameworks e plataformas como o <a href="https://tessel.io/">Tessel</a>.<br>Na robótica, o JavaScript se faz presente da mesma maneira. Existem diversas ferramentas que facilitam a interação com o hardware, possibilitando a criação de robôs. O <a href="https://github.com/rwaldron/johnny-five">johnny-five</a> é um exemplo de ferramenta com tal capacidade.<br>A plataforma Node.js possibilita a criação de aplicações web escaláveis, fazendo com que o JavaScript hoje atue não somente no browser, mas também no servidor.<br>Grandes empresas como <a href="https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/">PayPal</a>, <a href="https://www.joyent.com/developers/videos/node-js-at-walmart-introduction">Wallmart</a>, <a href="https://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_quicktour.html">Yahoo!</a>, <a href="http://blogs.windows.com/buildingapps/2015/05/12/bringing-node-js-to-windows-10-iot-core/">Microsoft</a>, <a href="https://hacks.mozilla.org/category/node-js/">Mozilla</a>, entre outras, apostam no Node.js como ferramenta de ponta para criar aplicações, ferramentas, servidores, etc.<br>Com o JavaScript ainda é possível driblar a fragmentação do mercado mobile. Existem diversas ferramentas que possibilitam criar aplicações utilizando a plataforma Web como base e, no final, gerar apps para Android e IOS. O <a href="https://www.nativescript.org/">NativeScript</a> é um ótimo exemplo de como usar JavaScript para desenvolver apps mobile de forma híbrida.<br>Os exemplos não param por aí, existem muitas outras áreas onde o JavaScript está embutido de forma passiva ou ativa, inclusive em sistemas operacionais como o <a href="https://www.mozilla.org/en-US/firefox/os/2.0/">FirefoxOS</a> e o <a href="https://node-os.com/">NodeOS</a>.<br>Como tudo na tecnologia, o JavaScript também evolui de forma exponencial, em um espaço de tempo cada vez menor.<br><a href="http://blog.codinghorror.com/the-principle-of-least-power/">Jeff Atwood</a> não é nenhum <a href="http://pt.wikipedia.org/wiki/Lei_de_Moore">Gordon Moore</a>, mas nos cunhou uma das leis mais acertivas dos últimos tempos: &quot;Any application that can be written in JavaScript, will eventually be written in JavaScript&quot;.  </p>
<p>No ano em que o JavaScript completa seus 20 anos, uma nova versão está prestes a ser lançada (Junho de 2015).<br>A versão ES2015 (também chamada de ES6) é a sexta versão do JavaScript, e é a maior atualização feita na linguagem desde o seu lançamento.<br>Esta nova versão conta com uma série de novos recursos e melhorias na linguagem. Tais avanços abrem um novo horizonte para os desenvolvedores que agora contam com uma linguagem muito mais robusta e eficiente.<br>A nomenclatura na versão da linguagem mudou, e agora segue um novo modelo para próximos lançamentos. A ideia é ter atualizações anuais, fazendo com que a linguagem não fique estagnada, como aconteceu em anos anteriores.<br>A versão ES2016 já está em pauta e é possível <a href="https://esdiscuss.org/">acompanhar</a> o que está sendo elaborado e até mesmo colaborar no desenvolvimento da nova especificação.  </p>
<p>No Brasil, o JavaScript está bem representado por uma comunidade muito forte e extremamente engajada.<br>Mais de 30 eventos regionais relacionados ao JavaScript acontecem anualmente, sendo a <a href="http://braziljs.com.br/">BrazilJS Conf</a> o principal evento.<br>Além de principal conferência sobre JavaScript no Brasil, a BrazilJS Conf é a maior conferência JavaScript do mundo, contando com mais de 1000 pessoas todo ano e trazendo nomes de peso da comunidade mundial para palestrar.<br>Neste ano acontece a 5º edição do evento, em Porto Alegre, dias 21 e 22 de Agosto.<br>Alguns palestrantes já foram anunciados, dentre eles <a href="http://en.wikipedia.org/wiki/Brendan_Eich">Brendan Eich</a>, criador do JavaScript, <a href="http://andreasgal.com/">Andreas Gal</a>, CTO da Mozilla e Laurie Voss, CTO do <a href="https://www.npmjs.com/">npm</a>.  </p>
]]></description>
            <pubDate>Wed, 20 May 2015 02:27:47 GMT</pubDate>
            <guid>http://jaydson.org/20-anos-do-javascript</guid>
        </item>
        
        <item>
            <title>A falácia do não ter tempo</title>
            <link>http://jaydson.org/a-falacia-do-nao-ter-tempo</link>
            <description><![CDATA[<p>Não caia nessa armadilha cômoda de dizer que não tem tempo pra nada.<br>Exemplos:<br><em>&quot;Não vi teu email ainda, pois estou com a caixa cheia e não tive tempo&quot;</em>.<br><em>&quot;Não fiz aquela viagem, pois estou muito aterefado no trabalho e não tive tempo&quot;</em>.<br><em>&quot;Hoje não vou almoçar, pois estou sem tempo!&quot;</em>.<br><em>&quot;Não posso me divertir pois estou sem tempo!&quot;</em>.  </p>
<p><strong>BULLSHIT</strong>!<br>Eu poderia citar 1000 frases que já ouvi de pessoas que dizem que não tem tempo pra nada.<br>Eu mesmo já cheguei a cair nessa armadilha, mas hoje estou curado, e quero compartilhar com vocês essa minha experiência.  </p>
<h2 id="-n-o-ter-tempo-bullshit">&quot;Não ter tempo&quot; é bullshit</h2>
<p>Sério. Não ter tempo é falta de organização e falta de priorização.<br>No início do ano eu entrei em um projeto crítico no Terra, daqueles que se não funcionar, nada mais funciona.<br>Fiquei envolvido meses nesse projeto e o resultado foi excelente, tudo entregue, e o novo Terra foi pro ar como era esperado.  </p>
<p>Organizar um evento pode parecer fácil, mas digo com toda propriedade, não é! Leva-se um ano inteiro para organizar um evento do porte da <a href="http://braziljs.com.br">BrazilJS Conf</a>.<br>Desde o meio do ano passado eu venho trabalhando para fazer o evento acontecer. Note que simultâneamente organizo um evento internacional para 1000 pessoas e trabalho full-time no Terra.<br>Bom, a BrazilJS Conf foi um sucesso, novamente. Com muito trabalho e dedicação, o evento aconteceu em Agosto e atingiu todas as expectativas.  </p>
<p>Neste ano, já palestrei mais de 10 vezes em no mínimo 7 estados diferentes no Brasil.<br>Para quem acha que palestrar é fácil, digo com propriedade, não é.<br>Para dar uma palestra, é preciso muito estudo sobre o assunto, preparação, viagem, etc.<br>Não sou só palestrante, também participei de vários eventos como espectador.  </p>
<p>Não podemos parar de estudar nunca, certo?<br>Este ano me dediquei aos estudos de <a href="http://es6rocks.com">ES6</a>, a nova versão do JavaScript.<br>Dei palestras a respeito, e resolvi criar um site voltado para disseminar o conhecimento adquirido durante os meus estudos, o <a href="http://es6rocks.com">ES6Rocks.com</a>.<br>Não contente em criar um site, antes mesmo de faze-lo, eu decidi criar um gerador de sites estáticos, também usando o conhecimento sobre ES6, então nasceu o projeto open-source <a href="https://github.com/es6rocks/harmonic">Harmonic</a>.  </p>
<p>Também resolvi mudar o meu blog. Não somente a parte visual, mas o back-end também.<br>Como criei um gerador de sites estáticos, fazia muito sentido usa-lo para o meu próprio blog.<br>Fiz a migração da plataforma Octpress para o Harmonic, e também dei uma <a href="http://jaydson.org/novo-blog-powered-by-harmonic/">boa mudada</a> no layout.<br>Obviamente, manter um blog não é tarefa fácil, é necessário conteúdo, e este ano, fiz alguns posts como esse que escrevo agora.  </p>
<p>Mas vocês podem estar pensando <em>&quot;ah, mas ele só faz isso, nem deve se divertir&quot;</em>.<br>Estou atualmente assistindo 7 séries(Para os curiosos: Hannibal, Vikings, Under the dome, Walking dead, Da Vinci demons, True Detective e Family Guy)! Além de sempre ir no cinema quando tem algum filme legal, ou assistir no pc.  </p>
<p>Tenho um filho, e apesar de ele morar com a mãe, eu me envolvo em tudo que posso para ser o pai mais presente do mundo.<br>Minha namorada mora a 2h da minha cidade, ou seja, de 2 em 2 semanas eu viajo pra passar o final de semana com ela.<br>E por falar em final de semana, eu <strong>NUNCA</strong> trabalho no final de semana(existem exceções muito raras).  </p>
<p>Eu estou sempre ativo no Twitter, Facebook, Gmail e Github.<br>Também vejo as notícias no Terra e em outros sites e eventualmente na tv.<br>Acho que chega né?<br>Acredite, eu faço mais coisas do que listei acima.<br>Então, <strong>O SEU ARGUMENTO É INVÁLIDO</strong>.  </p>
<h2 id="qual-o-segredo-">Qual o segredo?</h2>
<p>O primeiro segredo é admitir pra si mesmo que essa história do &quot;não ter tempo&quot; é <em>bullshitagem</em>.<br>Não existe receita milagrosa para isso, basta querer e parar de frescura.<br>A única &quot;técnica&quot; que utilizo é a regra dos 2 minutos.<br>Essa regra consiste em eliminar as pequenas coisas que normalmente são procrastinadas.<br>É bem simples: Leva menos de 2 minutos pra fazer? Faz.<br>Exemplo clássico:<br>Um email na tua caixa de entrada que tu só precisa responder &quot;sim&quot; ou &quot;não&quot;.<br>Responda na hora. Não marque como não lido pra responder depois.<br>Acredite, essa técnica funciona.  </p>
<p>Outro ponto, que pode não ser fácil, é fazer as coisas com tesão.<br>Se o que precisa ser feito não é algo tão legal, procure uma maneira de tornar essa tarefa agradável, mesmo que leve mais tempo.<br>Não deixe de lado o lazer nunca. Sempre arrange um tempo para sair, beber, ir no cinema, ver uma série, ir em um show, etc.  Isso vai te tornar mais produtivo.  </p>
<p>Outra dica, faça uma pequena coisa de cada vez. Eu sei, o mundo é corrido, temos que conciliar várias coisas ao mesmo tempo, mas sempre da pra quebrar em pequenas partes.<br>Última: saiba dizer não e saiba dizer que não vai fazer, e melhor ainda, delegue tarefas que podem ser delegadas.  </p>
<h2 id="conclus-o">Conclusão</h2>
<p>Se o teu perfil bate com esse cara que não tem tempo, tente dar uma repensada nas tuas tarefas.<br>Eu consegui, qualquer um consegue, basta querer.<br>O ano ainda não acabou, ainda posso fazer o dobro do que fiz até agora, sem loucura, e sem abrir mão do lazer.<br>Tente não procrastinar tanto, as vezes acabamos deixando uma coisa pra depois, sem problemas, mas quando tudo fica pra depois, aí fica difícil.  </p>
]]></description>
            <pubDate>Wed, 10 Sep 2014 03:14:37 GMT</pubDate>
            <guid>http://jaydson.org/a-falacia-do-nao-ter-tempo</guid>
        </item>
        
        <item>
            <title>Reportagem BrazilJS 2014</title>
            <link>http://jaydson.org/reportagem-braziljs-2014</link>
            <description><![CDATA[<p>Mais uma vez a repercussão da BrazilJS Conf supera barreiras.<br>Neste ano, a rede Record fez uma matéria bem bacana sobre o que rolou no evento, entrevistando palestrantes e organizadores do evento, além de capturar a essência do evento em takes de palestras e da galera fazendo networking.<br>Ainda me surpreendo com o alcance do evento.  </p>
<iframe width="100%" height="600" src="//www.youtube.com/embed/AgZJQT1-ixg" frameborder="0" allowfullscreen></iframe>]]></description>
            <pubDate>Thu, 28 Aug 2014 04:32:40 GMT</pubDate>
            <guid>http://jaydson.org/reportagem-braziljs-2014</guid>
        </item>
        
        <item>
            <title>Novo blog, powered by Harmonic</title>
            <link>http://jaydson.org/novo-blog-powered-by-harmonic</link>
            <description><![CDATA[<p>Galera, é com muita satisfação que hoje anuncio uma mudança aqui no Blog.<br>Ao longo desses 6 anos que o mantenho, já fiz diversas mudanças, a última vez por exemplo, foi a migração do Wordpress para o Octopress (relatado aqui: <a href="http://jaydson.org/migrando-para-octopress/">http://jaydson.org/migrando-para-octopress/</a>).<br>Desta vez a satisfação é reforçada, pois estou utilizando uma solução criada por mim, para gerar sites estáticos.  </p>
<h2 id="harmonic">Harmonic</h2>
<p>Tenho estudado bastante sobre <a href="http://es6rocks.com">ES6</a> nos últimos meses, inclusive dei <a href="https://speakerdeck.com/jaydson/javascript-do-futuro-no-presente">algumas</a> <a href="https://speakerdeck.com/jaydson/es6-rocks">palestras</a> sobre  o assunto, e acabei mergulhando tanto, que alguns projetos nasceram.<br>Um destes projetos é o <a href="https://github.com/es6rocks/harmonic">Harmonic</a>, um gerador de sites estáticos feito em <a href="http://nodejs.org">node</a>, utilizando algumas features de ES6.<br>O projeto ainda está em alpha, mas como voces podem ver, o meu blog já está rodando com ele, assim como o site do <a href="http://es6rocks.com">ES6Rocks.com</a>.  </p>
<h2 id="porqu-um-novo-gerador">Porquê um novo gerador</h2>
<p>Quando inicei a pesquisa para a migração do Wordpress, acabei escolhendo usar o <a href="http://octopress.org/">Octopress</a> pelo seu ecossistema.<br>Eu gostaria de ter usado algo feito em node, para poder contribuir ativamente, mas na época não encontrei nenhum que me agradasse.<br>O mais famoso e utilizado gerador estático em node é o <a href="http://docpad.org/">Docpad</a>, mas tive receio em usa-lo por n motivos, sendo um desses motivos o fato do Docpad ser feito em <a href="http://coffeescript.org/">CoffeeScript</a> e também por ter achado o projeto meio complexo arquiteturalmente.<br>A principal motivação para desenvolver o Harmonic foi o fato de poder fazer algo com ES6 e também por fazer alguma coisa paupável com Node.<br>O projeto criou corpo e em breve deve deixar de ser apenas um &quot;experimento&quot;.<br>Falarei mais sobre o Harmonic em posts futuros.<br>Se está interessado em contribuir ou usa-lo no seu blog, ficarei feliz em ajudar.<br><a href="https://github.com/es6rocks/harmonic">https://github.com/es6rocks/harmonic</a>  </p>
<h2 id="sobre-o-novo-blog">Sobre o novo Blog</h2>
<p>Desde 2009 eu mantenho esse Blog, e tenho a impressão de que as pessoas não chegam em posts antigos por não ter uma maneira fácil de acessa-los.<br>Criei um tema para o Harmonic, baseado no tema que o <a href="https://twitter.com/atilafassina">Átila Fassina</a> fez para o <a href="http://es6rocks.com">ES6Rocks</a>.<br>Este tema carrega posts conforme a barra de rolagem chega ao seu final. Desta maneira fica mais fácil consumir posts antigos.<br>Para a página do post em si, tentei deixar o menos poluído possível, mantendo as cores e fontes do blog anterior.<br>Me inspirei bastante no blog do <a href="http://bradfrostweb.com/">Brad Frost</a> para criar essas páginas.  </p>
<h2 id="considera-es-finais">Considerações finais</h2>
<p>É sempre legal criar coisas novas e úteis, mesmo que muitas vezes pareça que se está reinventando a roda, o aprendizado é válido.<br>Outra dica que sempre dou para pessoas novas na área é que exponham o seu códgio e criem coisas.<br>Hoje o Harmonic está como está porque uso o Github  como base, e lá consigo interagir com diversas pessoas que me dão dicas, resolvem problemas, reportam problemas, etc.  </p>
<p>Quero deixar registrado o meu agradecimento ao <a href="https://twitter.com/atilafassina">Átila Fassina</a> que fez o meu novo logo:  </p>
<p><div style="text-align:center"><img src="/images/logo-jaydson-gray.png" alt="Jaydson logo"><div>  </p>
<p>É isso galera, espero que tenham gostado tanto do novo blog quanto do Harmonic.  </p>
]]></description>
            <pubDate>Mon, 14 Jul 2014 02:56:47 GMT</pubDate>
            <guid>http://jaydson.org/novo-blog-powered-by-harmonic</guid>
        </item>
        
        <item>
            <title>ES6 Rocks - RSJS 2014</title>
            <link>http://jaydson.org/es6rocks-rsjs-2014</link>
            <description><![CDATA[<script async class="speakerdeck-embed" data-id="8a6b34f0c01401316ec20e2d98b4d7d5" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>]]></description>
            <pubDate>Sat, 17 May 2014 14:26:00 GMT</pubDate>
            <guid>http://jaydson.org/es6rocks-rsjs-2014</guid>
        </item>
        
    </channel>
</rss>
