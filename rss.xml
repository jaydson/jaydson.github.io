<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Jaydson Gomes</title>
        <link>http://jaydson.org</link>
        <description>Coisas sobre JavaScript e desenvolvimento Web</description>
        <managingEditor>Jaydson</managingEditor>
        <webMaster>Jaydson</webMaster>
        <pubDate>Sat, 13 Feb 2016 16:07:14 GMT</pubDate>
        <language>pt-br</language>
        <atom:link href="http://jaydson.org/rss.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Os 8 passos para o sucesso na carreira de dev</title>
            <link>http://jaydson.org/os-8-passos-para-o-sucesso-na-carreira-de-dev</link>
            <description><![CDATA[<p>Em 2015 montei a palestra com um título bem canalha: Os incríveis 8 passos para o sucesso na carreira de desenvolvimento de software.<br>Este título é obviamente uma bricandeira, visto que não existe fórmula para o sucesso em nenhuma carreira.<br>O que fiz foi contar um pouco da minha história, além de tentar dar algumas possíveis dicas para que esta começando a se aventurar na área.<br>O vídeo abaixo foi no TechInterior, evento em Jaboticabal, interior de São Paulo.<br>Os slides estão disponíveis no SpeakerDeck: <a href="https://speakerdeck.com/jaydson/os-incriveis-8-passos-para-o-sucesso-na-carreira-de-desenvolvedor-de-software">https://speakerdeck.com/jaydson/os-incriveis-8-passos-para-o-sucesso-na-carreira-de-desenvolvedor-de-software</a>  </p>
<div style="text-align:center"><iframe width="560" height="315" src="https://www.youtube.com/embed/1h3jjLqD39M" frameborder="0" allowfullscreen></iframe></div>]]></description>
            <pubDate>Sat, 13 Feb 2016 15:51:12 GMT</pubDate>
            <guid>http://jaydson.org/os-8-passos-para-o-sucesso-na-carreira-de-dev</guid>
        </item>
        
        <item>
            <title>Internet Explorer 8, 9 e 10 e o fim de uma era</title>
            <link>http://jaydson.org/internet-explorer-8-9-e-10-e-o-fim-de-uma-era</link>
            <description><![CDATA[<p><div style="text-align:center"><img src="/img/ie-grave.jpg" alt=""></div><br>  </p>
<p>Que dia histórico hein pessoal? 12 de Janeiro de 2016. Guardem esse dia em lugar especial da memória.<br>O dia em que a Microsoft aposentou o Internet Explorer.<br>Para quem não é tão velho como eu ou como o <a href="http://tableless.com.br/internet-explorer-8-9-e-10-foram-pro-saco/">Diego Eis</a>, talvez essa notícia não seja muito relevante, mas para quem viveu ao menos um pouco dos trágicos dias de desenvolvimento Web com a presença massiva do Internet Explorer, isso é um marco.<br>Assim como em 2009, o lançamento do Internet Explorer 8 também foi um marco.<br>Veja o meu velho relato aqui no Blog, no dia do lançamento do dito cujo: <a href="http://jaydson.org/internet-explorer-8/">http://jaydson.org/internet-explorer-8/</a>.<br>Na época eu listava feliz os recusros do novo Browser, como uma ferramenta para desenvolvedores! Wow!  </p>
<p>Parar de dar suporte as versões velhas do IE representa não apenas o que parece. Isso basicamente mostra uma nova Microsoft adaptada ao &quot;mundo real&quot;, digamos assim.<br>Podemos nos considerar vencedores nessa longa jornada que foi a luta contra o amargo browser azul.  </p>
<h2 id="fim-do-suporte-e-futuro">Fim do suporte e futuro</h2>
<p>Começando hoje, dia 12 de Janeiro de 2016, somente a versão mais atual do navegador Internet Explorer estará disponível.<br>No caso, apenas o Internet Explorer 11 receberá o devido suporte da Microsoft.<br>Por suporte entenda correções de bugs, atualizações de segurança, etc.<br>Obviamente, o fim do suporte não afetará imediatamente a todos. Não dê pulo de alegrias achando que em um piscar de olhos o mundo estará livre do nosso amigo. Isso leva tempo.<br>Mas o primeiro e mais importante passo foi dado, não têm volta. Emrpesas que ainda usam as versões velhas aos poucos vão se adaptar e no futuro tudo será lindo.  </p>
<p>O futuro é bastante promissor. O novo browser da Microsoft, o Edge, parece ser realmente muito bom, inclusive estando a frente de Chrome e Firefox em vários aspectos.<br>Mas o fato de fazer um browser que funcione bem não é motivo de orgulho para ninguém, isso é o básico.<br>O que mais me surpreende é a nova postura que a empresa está tomando, inclusive <a href="https://blogs.windows.com/msedgedev/2015/12/05/open-source-chakra-core/">tornando open-source</a> a engine JavaScript que roda no Edge.  </p>
<p>Que época boa para se viver não?<br>Mas claro, nossa vida de dev Front-end não é fácil. Se hoje a realidade dos browsers nos favorece de um lado, do outro a complexidade absurda que o Front-end se tornou assusta.  </p>
]]></description>
            <pubDate>Tue, 12 Jan 2016 21:36:06 GMT</pubDate>
            <guid>http://jaydson.org/internet-explorer-8-9-e-10-e-o-fim-de-uma-era</guid>
        </item>
        
        <item>
            <title>Quando vós programardes JavaScript - Palestra Webbr 2015</title>
            <link>http://jaydson.org/quando-v-s-programardes-javascript-palestra-webbr-2015</link>
            <description><![CDATA[<p>Em Setembro de 2015 aconteceu a 7º edição da <a href="http://conferenciaweb.w3c.br/">Webbr</a>, a principal conferência da <a href="http://www.w3c.br/Home/WebHome">W3C</a> no Brasil.<br>Novamente tive a oportunidade de ser um dos palestrantes nesse evento super importante para a comunidade de desenvolvimento brasileira.<br>Nessa talk falei sobre as novas versões do JavaScript, mostrando cases, novas features e o que esperar do futuro da linguagem.<br>O vídeo da palestra está disponível no Youtube:  </p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/8erF1b6_rmg?list=PLQq8-9yVHyOaHUE6t3x89xRO4-tPR1n2L" frameborder="0" allowfullscreen></iframe>

<p><br /><br /><br>Os slides estão no meu speakerdeck:  </p>
<script async class="speakerdeck-embed" data-id="344b9913ca0e47f6a31761f9d9cd206f" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>]]></description>
            <pubDate>Mon, 30 Nov 2015 03:21:10 GMT</pubDate>
            <guid>http://jaydson.org/quando-v-s-programardes-javascript-palestra-webbr-2015</guid>
        </item>
        
        <item>
            <title>Say my name - Palestra na JSConf Uruguai</title>
            <link>http://jaydson.org/say-my-name-palestra-na-jsconf-uruguai</link>
            <description><![CDATA[<p>Em Abril de 2015 tive o prazer de palestrar na <a href="http://jsconf.uy/">JSConf Uruguai</a>.<br>Esta foi a minha segunda palestra internacional e foi muito legal.<br>Falei sobre as novidades das novas versões do JavaScript (ES6 e ES7), falei um pouco sobre a comunidade no Brasil, sobre Sepultura e várias outras coisas :)<br>O vídeo foi disponibilizado no Youtube: </p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/O8xmfaE4XUc" frameborder="0" allowfullscreen></iframe>
<br /><br /> </p>
<p>E os slides no speakerdeck:</p>
<p><script async class="speakerdeck-embed" data-id="85659d99ac4b46b29578418168b1b3e8" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
<br /><br />
A JSConf Uruguai 2016 já tem data, fica a dica para quem quiser curtir um bom evento internacional sem gastar muito, já que ir para o Uruguai não é tão caro assim.  </p>
]]></description>
            <pubDate>Wed, 25 Nov 2015 03:15:37 GMT</pubDate>
            <guid>http://jaydson.org/say-my-name-palestra-na-jsconf-uruguai</guid>
        </item>
        
        <item>
            <title>Novos rumos 2015</title>
            <link>http://jaydson.org/novos-rumos-2015</link>
            <description><![CDATA[<p>Em 2011, ano da <a href="http://jaydson.org/brazil-js-2011-epicwin/">primeira BrazilJS</a>, eu comecei a trabalhar no Portal Terra.<br>Inclusive, fiz um post com título semelhante: <a href="http://jaydson.org/novos-rumos-2011/">Novos rumos 2011</a>.<br>Exatamente 4 anos depois estou aqui escrevendo sobre uma nova mudança, não faço mais parte do time do Portal Terra.  </p>
<h2 id="bons-tempos-ou-the-struggle">Bons tempos ou the struggle</h2>
<p>Foram bons tempos, onde aprendi e ensinei muito.<br>Uma empresa grande e com tantos anos de estrada acaba ficando estagnada em alguns aspectos e uma coisa que odeio é estagnação.<br>Em todos os momentos lutei bravamente para fazer o que achava melhor para a empresa crescer e evoluir.<br>Relatei aqui no Blog coisas relacionadas ao trabalho no Terra, como por exemplo o post <a href="http://jaydson.org/cultura-maldita-no-desenvolvimento-de-software/">&quot;Cultura maldita no desenvolvimento de software&quot;</a>, que por sinal é o meu post mais acessado ever.<br>Neste post eu levanto os sintomas desta Cultura e tento guiar a um caminho de extermínio da tal maldição.<br>Outro post relacionado é o <a href="http://jaydson.org/valorize-a-prata-da-casa/">&quot;Valorize a prata da casa&quot;</a>, onde falo sobre a falta de valorização de profissionais.<br>Também relatei em forma de post e de palestra o histórico do processo de desenvolvimento front-end: <a href="http://jaydson.org/processo-de-desenvolvimento-frontend-do-caos-ao-sublime/">&quot;Processo de Desenvolvimento FrontEnd - Do caos ao Sublime&quot;</a>.<br>Nesta palestra eu falo como mudamos radicalmente o processo de desenvolvimento front-end no Terra. Foram meses de trabalho e estudo e saio do Terra com a sensação de missão cumprida neste quesito.<br>Recentemente fiz um post sobre como estava o nosso <a href="http://jaydson.org/processo-front-end-no-terra/">processo front-end</a> e este post teve uma boa repercussão, inclusive com um <a href="http://tableless.com.br/processo-front-end-na-locaweb/">&quot;post resposta&quot;</a> do amigo <a href="https://twitter.com/diegoeis">Diego Eis</a>, no <a href="http://tableless.com.br/">Tableless</a>.<br>Neste post eu basicamente listei tudo que estava sendo feito até o momento em relação a front-end no Terra.  </p>
<h2 id="multithreading">Multithreading</h2>
<p>Eu sou um cara insatisfeito por natureza.
O fato de trabalhar em uma grande empresa nunca foi suficiente.<br>Como voces sabem, eu sou organizador da maior conferência JavaScript do mundo, e acreditem, organizar um evento deste porte consome 1 ano inteiro de trabalho.<br>Além disso, eu sou apaixonado pelo que faço. Adoro programar e criar coisas.<br>Desde sempre eu sou envolvido com a comunidade open-source.<br>Durante este tempo no Terra, em nenhum momento parei de fazer o que fazia antes, muito pelo contrário.<br>Há uns 2 anos, abri uma empresa junto com o <a href="http://twitter.com/felipenmoura">Felipe Moura</a>, somos primos e sócios.  </p>
<h2 id="nascweb">NascWeb</h2>
<p>A NascWeb é a empresa por trás de eventos como a BrazilJS Conf, RSJS, FrontInPoa e de outras coisas que estão por vir.<br>Este será o meu foco agora, portanto, não estou à procura de um novo emprego ;)<br>Aguardem novidades em breve!    </p>
]]></description>
            <pubDate>Wed, 12 Aug 2015 03:31:59 GMT</pubDate>
            <guid>http://jaydson.org/novos-rumos-2015</guid>
        </item>
        
        <item>
            <title>Processo front-end no Terra</title>
            <link>http://jaydson.org/processo-front-end-no-terra</link>
            <description><![CDATA[<p><br>
No <a href="http://terra.com.br">Terra</a>, o nosso processo de desenvolvimento front-end evoluiu muito nos últimos anos.<br>Relatei o histórico dessa evolução e como saimos de um processo totalmente falho para um processo eficaz e automatizado na palestra <a href="https://speakerdeck.com/jaydson/processo-de-desenvolvimento-frontend-do-caos-ao-sublime">&quot;Processo de Desenvolvimento front-end - Do caos ao Sublime&quot;</a>, também disponível em <a href="https://www.youtube.com/watch?v=tDGoXFM9afE">vídeo</a>.<br>Nosso processo antigo baseava-se basicamente em uma coisa: fazer commit no <a href="https://subversion.apache.org/">SVN</a>.<br>Em uma imagem:<br><br><img src="http://i.giphy.com/GYU7rBEQtBGfe.gif" alt="Go-Horse detected">  </p>
<p>Esse processo <em>testless</em>, <em>horseness</em>, etc, provavelmente foi aplicado em muitas empresas no passado (e ainda é!?!?!?!), e <a href="http://jaydson.org/cultura-maldita-no-desenvolvimento-de-software/">mudar a cultura é algo difícil</a>.<br>Isso tudo foi na era pré-<a href="http://jquery.com/">jQuery</a> e eu ainda nem fazia parte da empresa, mas quando cheguei, esse era o cenário.  </p>
<p>Acredito que a base para se ter um produto de qualidade é garantir que o código também tenha qualidade.<br>Um ambiente de desenvolvimento com tecnologia de ponta e processos bem definidos é uma das ferramentas que vai nos permitir fazer código consistente, consequentemente gerando produtos melhores.  </p>
<h2 id="testar-front-end-dif-cil">Testar front-end é difícil</h2>
<p>Front-end é diferente. Deal with it.<br>Óbvio que muitos dos conceitos existentes em outras linguagens e plataformas são aplicáveis nesse mundo, mas não tudo.<br>Para empresas em que a realidade não é o desenvolvedor full-stack isso fica muito claro. Basta falar com um desenvolvedor com brackground back-end para entender que pouca coisa pode ser reutilizada na camada do browser.<br>Fazer qualquer tipo de teste no ambiente front-end não é uma tarefa fácil.<br>A velha história: browsers, resolução de tela, sistema operacional, devices e plataformas diferentes são algumas das variáveis que temos nesse mundo complexo.<br>A verdade é que agora estamos em um cenário totalmente diferente. 
Dizer que &quot;é difícil&quot; não é mais desculpa, e difícil não é impossível.<br>Com o avanço da tecnologia na área de front-end e a quantidade de ferramentas disponíveis que temos atualmente, testar bem e de forma automatizada o seu produto, ter processos coerentes, seguir e aplicar conceitos sólidos de mercado, etc, é o mínimo.  </p>
<h2 id="onde-estamos-no-terra">Onde estamos no Terra</h2>
<p>Estamos no ponto que ainda considero básico.   </p>
<ul>
<li>Todas aplicações são (ou devem ser) baseados no nosso Framework interno</li>
<li>Todas aplicações devem possuir testes unitários</li>
<li>Os testes unitários rodam no PhantomJS e no browser</li>
<li>Todas aplicações são iniciadas com um scaffold básico que garante consistência</li>
<li>Todas aplicações devem ser documentadas</li>
<li>O build de todas aplicações são baseadas no Grunt</li>
<li>O Grunt garante que todas aplicações possuam tasks básicas de validação e de build</li>
<li>Cada aplicação é um projeto isolado no Github (usamos a solução <a href="https://enterprise.github.com/home">enterprise</a>)</li>
<li>O deploy é feito de forma automática pelo noss CI server (Jenkins)</li>
<li>O CI server obrigatóriamente roda as tasks de build e validação  </li>
</ul>
<p><br>
Pontos falhos que devemos melhorar:  </p>
<ul>
<li>O desenvolvedor pode desabilitar os testes antes de fazer deploy</li>
<li>Grande parte dos testes da aplicação precisam de mão humana</li>
<li>Não existe teste comportamental nos projetos (BDD)</li>
<li>Não existe teste automatizado para múltiplos browsers, plataformas e dispositivos</li>
<li>Não existe um dashboard para acompanhar o status de cada aplicação</li>
</ul>
<h2 id="como-resolver-os-pontos-falhos">Como resolver os pontos falhos</h2>
<p><em>&quot;O desenvolvedor pode desabilitar os testes antes de fazer deploy&quot;</em>
O nosso CI server roda 2 tasks do Grunt: <code>ci-validate</code> e <code>ci-build</code>.<br>Estas tasks são responsáveis por validar (testes, lint, style, etc) e fazer o build.<br>O problema é que a task de validação precisa existir no projeto, e em alguns casos ela já foi desabilitada por algum desenvolvedor espertinho que não quis parar para resolver um erro simples, ou não quis validar os testes unitários.<br>Uma possível solução seria criar um mecanismo de defesa que sempre incluisse a task de validação no CI server. Desta maneira, mesmo que o projeto não faça validação, o servidor irá fazer, e bloquear a deploy em caso de falha.  </p>
<p><em>&quot;Grande parte dos testes da aplicação precisam de mão humana&quot;</em><br>A responsabilidade de testar uma interface fica dividida entre desenvolvedor, gerente, área de produtos e quem mais estiver envolvido no projeto.<br>Isso é péssimo, nunca ninguém sabe ao certo o que validar, e tudo acaba sendo muito superficial.<br>Uma possível solução seria integrar a cada projeto testes compartamentais, tornando assim o processo mais consistente e menos dependente de pessoas.  </p>
<p><em>&quot;Não existe teste automatizado para múltiplos browsers, plataformas e dispositivos&quot;</em><br>O processo que temos hoje apenas roda testes no PhantomJS rodando em um Linux.<br>Já é um primeiro passo, mas longe do ideal.<br>Nosso próximo passo é integrar alguma solução como o <a href="http://www.seleniumhq.org/projects/webdriver/">WebDriver</a>.  </p>
<h2 id="conclus-o">Conclusão</h2>
<p>Mesmo não sendo nada revolucionário, resolvi compartilhar o que fazemos, pois tenho certeza que será útil de alguma forma para alguém.<br>Como falei antes, ainda considero esse processo muito básico e estamos correndo para chegar em um outro patamar em breve.<br>Comparando com o processo anterior, evoluímos uns 10 anos em pouco mais de 2.  </p>
]]></description>
            <pubDate>Thu, 25 Jun 2015 04:52:57 GMT</pubDate>
            <guid>http://jaydson.org/processo-front-end-no-terra</guid>
        </item>
        
        <item>
            <title>WebAssembly e o futuro da Web</title>
            <link>http://jaydson.org/webassembly-e-o-futuro-da-web</link>
            <description><![CDATA[<h2 id="o-wasm-">O &quot;wasm&quot;</h2>
<p>Na última semana, <a href="https://brendaneich.com">Brendan Eich</a>, o criador do <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a>, <a href="https://brendaneich.com/2015/06/from-asm-js-to-webassembly">anunciou</a> o <a href="https://github.com/WebAssembly">WebAssembly</a>.<br>O WebAssembly, ou apenas <em>&quot;wasm&quot;</em> é um novo formato binário para a Web.<br>O <a href="https://twitter.com/_ericelliott">Eric Elliot</a> <a href="https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6">definou</a> muito bem o que é o WebAssembly em 4 simples itens:  </p>
<ul>
<li><strong><em>WebAssembly é uma melhoria para o JavaScript</em></strong><br><em>Uma maneira de implementar coisas críticas para performance em wasm e usa-las com JavaScript</em></li>
<li><strong><em>WebAssembly é uma nova linguagem</em></strong><br>_Código wasm define um <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> representado em um formato binário_</li>
<li><strong><em>WebAssembly é uma melhoria para os Browsers</em></strong><br><em>Os Browsers entenderão esse formato binário, e na maioria dos casos isso será mais rápido</em></li>
<li><strong><em>WebAssembly é uma forma de suportar outras linguagens na plataforma Web</em></strong><br><em>Outras linguagens poderão compilar para wasm e rodar no navegador como binário first-class</em><br><br></li>
</ul>
<p>Parafraseando o Brendan, wasm é uma nova representação intermediária de código na Web.<br>Esse novo formato tem como objetivo principal ser performático (mais do que o JavaScript e mais do que o <a href="http://asmjs.org/">asm.js</a>) e também permitir que outras linguagens compilem para wasm, fazendo com que rodem &quot;nativamente&quot; na Web.<br>Obviamente uma questão vêm à tona: Mas já não houveram outras iniciativas parecidas como essa antes? Flash? Google Native Client?<br>Pois é.<br>O <a href="http://www.2ality.com/">Dr. Axel Rauschmayer</a> <a href="http://www.2ality.com/2015/06/web-assembly.html">listou</a> 3 pontos que diferem a nova abordagem das antigas:  </p>
<ul>
<li>Não existe uma só empresa por trás dessa iniciativa. <a href="http://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/#.jhbnb6:Gfuu">Mozilla, Google, Microsoft, entre outros</a>, estão engajados nesse projeto, com o objetivo de tornar a Web mais rápida.  </li>
<li>Existe uma boa interoperabilidade entre o JavaScript e o wasm, diferente de antigas implementações (Lembram que horror integrar Flash com JS?). Usar wasm será tão simples como importar um <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">módulo ES2015/ES6</a>.  </li>
<li>Para rodar o wasm não será necessário um plugin ou um novo <em>browser engine</em>, mas sim apenas a implementação desta nova camada nas engines existentes.<br><br>
Isso é excelente, pois o interesse aqui não é apenas algo específico para uma aplicação ou para uma empresa, mas sim para a evolução da Web.<br>Um novo standard baseado em interesses da comunidade de desenvolvimento e com apoio das gigantes da tecnologia parece muito promissor.<br>O projeto já nasceu <a href="https://github.com/WebAssembly">aberto</a> e um <a href="https://www.w3.org/community/webassembly/">W3C Community Group</a> já foi criado, portanto, se tu tens interesse em contribuir de alguma maneira, não existem barreiras!  </li>
</ul>
<h2 id="objetivos">Objetivos</h2>
<p>O projeto lista alguns <a href="https://github.com/WebAssembly/design/blob/master/HighLevelGoals.md">High Level Goals</a>, dentre eles:    </p>
<ul>
<li>Definir um formato binário que seja eficiente no tamanho e no carregamento que possa ser compilado para ser executado em velocidade nativa, aproveitando recursos de hardware comuns disponíveis em diversas plataformas, incluindo mobile e <a href="https://en.wikipedia.org/wiki/Internet_of_Things">IoT</a>.  </li>
<li>Especificar e implementar incrementalmente um MVP com as mesmas funcionalidades do asm.js, além de ter um polyfill que  traduzirá wasm para JavaScript.<br><br>
Creio que em pouco tempo já teremos algo disponível para brincarmos :)<br>Para os mais aventureiros, já existe um <a href="https://github.com/WebAssembly/polyfill-prototype-1">protótipo de polyfil</a> no Github onde é possível testar algumas coisas e entender o que teremos em futuro próximo.<br>Neste protótipo existe uma ferramenta que compila arquivos JavaScript contendo código asm.js para o novo formato WebAssembly.<br>Basicamente o resultado será algo assim:  <pre><code>7761 736d 2603 0000 0000 0002 0303 0002
0103 0000 0000 0000 0000 0003 0001 0100
8000 8000 8000 0102 6f6e 6500 0074 776f
0001
</code></pre><img src="/img/webassembly-hacker.jpg" alt="WebAssembly Hacker"></li>
</ul>
<p><br>
Sim, wasm é um fomato binário, lembram? (dãh)</p>
<p>É isso pessoal, esse foi um overview bem superficial do que é o WebAssembly.<br>Recomendo fortemente que leiam os artigos citados abaixo nas referências para um melhor aprofundamento.  </p>
<p>Referências:<br><a href="https://brendaneich.com/2015/06/from-asm-js-to-webassembly">https://brendaneich.com/2015/06/from-asm-js-to-webassembly</a><br><a href="https://github.com/WebAssembly">https://github.com/WebAssembly</a><br><a href="http://www.2ality.com/2015/06/web-assembly.html">http://www.2ality.com/2015/06/web-assembly.html</a><br><a href="https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6">https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6</a><br><a href="http://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly">http://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly</a><br><a href="http://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/#.jhbnb6:Gfuu">http://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/#.jhbnb6:Gfuu</a>  </p>
]]></description>
            <pubDate>Tue, 23 Jun 2015 04:23:59 GMT</pubDate>
            <guid>http://jaydson.org/webassembly-e-o-futuro-da-web</guid>
        </item>
        
        <item>
            <title>APIs REST em 1 minuto</title>
            <link>http://jaydson.org/api-s-rest-em-1-minuto</link>
            <description><![CDATA[<p>No último <a href="http://rsjs.org">RSJS</a> tive a oportunidade de assistir a palestra <a href="http://dclucas.github.io/prez-harvesterjs">&quot;Ligthweight APIs with HarvesterJS&quot;</a> do meu ex-professor <a href="https://twitter.com/diogoclucas">Diogo Lucas</a>.<br>Em poucos minutos de palestra eu já consegui identificar várias aplicações que fiz no passado, que poderiam ser totalmente reescritas de uma maneira muito mais simples com o <a href="https://github.com/agco/harvesterjs">HarvesterJS</a>.<br>O HarvesterJS é originalmente um fork do projeto <a href="http://fortunejs.com/">FortuneJS</a>, um framework para criar APIs <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> baseadas na spec <a href="http://jsonapi.org">JSONAPI</a>.  </p>
<p>O objetivo do Harvester foca em manter uma API fiel à JSONAPI spec, com suporte específico ao <a href="http://docs.mongodb.org/">MongoDB</a> (além de resolver alguns problemas de escalabilidade).<br>O projeto está bem ativo e é mantido pelo pessoal da <a href="http://www.agcocorp.com/">AGCO</a>, uma empresa do ramo da agricultura.  </p>
<p>Ok ok, <em>talk is cheap</em>.<br>O título do post é bem sério. É possível criar uma API REST em 1 minuto com o Harvester.<br>Supondo que o seu ambiente já tenha <a href="http://nodejs.org">Node.js</a> e MongoDB, o resto é super fácil, mesmo.<br>Digamos que a sua API precisa expor uma entidade &quot;artist&quot;.<br>Por expor entenda que a API deve disponibilizar métodos <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> para as aplicações.  </p>
<pre><code>// app.js
let harvester = require(&#39;harvesterjs&#39;);

let app = harvester({
    adapter: &#39;mongodb&#39;,
    connectionString: &quot;localhost:27017/mydatabase&quot;
});

app.resource(&#39;artist&#39;, {
    name: String,
    description : String,
})
.listen(1337);
</code></pre><p>Pronto.<br>Basta levantar a aplicação:  </p>
<pre><code>node app.js
</code></pre><p>E agora existe uma API REST completa funcionando.<br>O que é possível fazer?<br>Todas as operações de CRUD via métodos http:  </p>
<h2 id="listar-todos-artistas">Listar todos artistas</h2>
<pre><code>GET     /artists
</code></pre><h2 id="criar-um-novo-artista">Criar um novo artista</h2>
<pre><code>POST     /artists
{
    &quot;name&quot;: &quot;Sepultura&quot;,
    &quot;description&quot;: &quot;Brazilian Metal band&quot;
}
</code></pre><h2 id="pegar-um-artista-pelo-id">Pegar um artista pelo ID</h2>
<pre><code>GET     /artists/555d0bbb37d40da5abc11a86
</code></pre><h2 id="alterar-os-dados-de-um-artista">Alterar os dados de um artista</h2>
<pre><code>PUT     /artists/555d0bbb37d40da5abc11a86
{
    &quot;name&quot;: &quot;Sepultura&quot;,
    &quot;description&quot;: &quot;Best brazilian Metal band ever&quot;
}
</code></pre><h2 id="deletar-um-artista">Deletar um artista</h2>
<pre><code>DELETE     /artists/555d0bbb37d40da5abc11a86
</code></pre><p><br />
Ainda é possível criar relações de maneira bem simples.<br>Digamos que um artista possui referência à outro artista, no caso, 1 para n.<br>Podemos alterar o nosso &quot;resource&quot; de maneira que essa relação seja estabelecida:  </p>
<pre><code>app.resource(&#39;artist&#39;, {
    name: String,
    description : String,
    influences : [&#39;artist&#39;]
})
.listen(1337);
</code></pre><p>Com esta simples alteração nossa API passa a suportar relações:  </p>
<pre><code>GET  /artists/555d5c701eb2d1d033f3b704/influences
</code></pre><p>O retorno desta chamada será baseado nas relações previamente armazenadas, ou seja, se a aplicação disse que determinado artista possui 2 influências, um array de 2 artistas será retornado.  </p>
<h2 id="conclus-o">Conclusão</h2>
<p>Este foi um post introdutório com objetivo de mostrar como é fácil criar APIs REST com o Harvester.<br>Além da facilidade, o código necessário para escrever APIs fica muito fácil de manutenir e evoluir.<br>Eu mesmo reescrevi uma aplicação que tinha certamente mais de 1500 linhas em pouco mais de 10 linhas com o Harvester.  </p>
<p><blockquote class="twitter-tweet" lang="en"><p lang="pt" dir="ltr">Ontem reescrevi em 10 linhas uma aplicação que fiz há um ano atrás com umas 1500. Sério. &lt;3 HarvesterJS //cc <a href="https://twitter.com/diogoclucas">@diogoclucas</a></p>&mdash; Jaydson Gomes (@jaydson) <a href="https://twitter.com/jaydson/status/603541170426290178">May 27, 2015</a></blockquote></p>
<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
É isso pessoal, para maiores informações sobre o Harvester, vasculhem o Github do projeto (ainda está com pouca documentação, mas em breve eles devem resolver esse problema).  </p>
]]></description>
            <pubDate>Wed, 27 May 2015 21:30:20 GMT</pubDate>
            <guid>http://jaydson.org/api-s-rest-em-1-minuto</guid>
        </item>
        
        <item>
            <title>Entrevista JSConf Argentina 2014</title>
            <link>http://jaydson.org/entrevista-jsconf-argentina-2014</link>
            <description><![CDATA[<p>No <a href="/es6rocks-palestra-na-jsconf-argentina">post anterior</a> falei sobre minha palestra na JSConf Argentina.<br>Além do vídeo da palestra, rolou também uma pequena entrevista bem bacana feita pelo pessoal da organização.<br>Na entrevista falo um pouco sobre o que foi a minha palestra, e claro, sobre JavaScript :)</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/xzTfi7Wz6ac" frameborder="0" allowfullscreen></iframe>]]></description>
            <pubDate>Tue, 26 May 2015 00:47:37 GMT</pubDate>
            <guid>http://jaydson.org/entrevista-jsconf-argentina-2014</guid>
        </item>
        
        <item>
            <title>ES6Rocks - Palestra na JSConf Argentina</title>
            <link>http://jaydson.org/es6rocks-palestra-na-jsconf-argentina</link>
            <description><![CDATA[<p>Em novembro de 2014 tive o prazer de palestrar na <a href="http://jsconfar.com/">JSConf Argentina</a>.<br>Além da pressão de pela primeira vez palestrar em inglês, dividi o palco com <a href="https://brendaneich.com/">Brendan Eich</a>, <a href="http://andreasgal.com/">Andreas Gal</a>, <a href="https://alexsexton.com/">Alex Sexton</a>, <a href="http://mrdoob.com/">Mr. Doob</a>, <a href="https://github.com/sebmarkbage">Sebastián Markbage</a>, entre outros. Baita responsabilidade.<br>Lá falei sobre ES6, a nova versão do JavaScript (hoje ES2015 - as coisas mudam rápido né?).<br>O vídeo da palestra está disponível no Youtube:  </p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/7g_6hfG0stc" frameborder="0" allowfullscreen></iframe> 
<br /><br /> </p>
<p>E os slides no speakerdeck:</p>
<script async class="speakerdeck-embed" data-id="b6e9667059bb013265ca4603c43c215f" data-ratio="1.6" src="//speakerdeck.com/assets/embed.js"></script>]]></description>
            <pubDate>Fri, 22 May 2015 02:34:29 GMT</pubDate>
            <guid>http://jaydson.org/es6rocks-palestra-na-jsconf-argentina</guid>
        </item>
        
    </channel>
</rss>
